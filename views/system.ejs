<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>threedots - System Processes</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-900 text-white">
  <% include ("header") %>

  <div class="container mx-auto p-6">
    <h2 class="text-2xl font-semibold mb-4">System Processes</h2>
    
    <!-- System Statistics Panel -->
    <div id="systemStats" class="bg-gray-800 p-4 rounded-xl mb-6">
      <h3 class="text-lg font-bold mb-3 text-blue-400">System Statistics</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <div class="text-center">
          <div class="text-2xl font-bold text-green-400" id="processCount">-</div>
          <div class="text-sm text-gray-400">Active Processes</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-yellow-400" id="avgCpu">-</div>
          <div class="text-sm text-gray-400">Avg CPU Usage</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-cyan-400" id="memUsage">-</div>
          <div class="text-sm text-gray-400">Memory Usage</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-purple-400" id="systemLoad">-</div>
          <div class="text-sm text-gray-400">System Load (1m)</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-orange-400" id="dataPoints">-</div>
          <div class="text-sm text-gray-400">Total Data Points</div>
        </div>
      </div>
      <div class="mt-4 text-center text-sm text-gray-500">
        <span id="dataRange">Charts show up to 1 hour of historical data (5-second intervals)</span>
      </div>
    </div>

    <% if (processes && processes.length > 0) { %>
      <div id="systemGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <% processes.forEach(proc => { %>
          <div id="proc-<%= proc.PID %>" class="bg-gray-800 p-4 rounded-xl shadow-lg">
            <h3 class="text-lg font-bold mb-2 truncate"><%= proc.COMMAND %></h3>
            <p>PID: <span class="text-yellow-400"><%= proc.PID %></span></p>
            <p>User: <span class="text-blue-400"><%= proc.USER %></span></p>
            <p>CPU: <span class="cpu text-green-400"><%= proc.CPU %>%</span></p>
            <p>Memory: <span class="mem text-cyan-400"><%= proc.MEM %>%</span></p>
            <p>Status: <span class="status text-purple-400"><%= proc.STAT %></span></p>
            <p>Start Time: <span class="text-gray-400"><%= proc.START || proc.STIME %></span></p>

            <!-- Actions -->
            <div class="mt-3 flex gap-2 flex-wrap">
              <button onclick="killProcess('<%= proc.PID %>')" class="px-3 py-1 bg-red-600 rounded hover:bg-red-500 transition-colors text-sm">Kill</button>
              <button onclick="forceKillProcess('<%= proc.PID %>')" class="px-3 py-1 bg-red-800 rounded hover:bg-red-700 transition-colors text-sm">Force Kill</button>
              <button onclick="viewDetails('<%= proc.PID %>')" class="px-3 py-1 bg-blue-600 rounded hover:bg-blue-500 transition-colors text-sm">Details</button>
              <button onclick="viewLogs('<%= proc.PID %>')" class="px-3 py-1 bg-green-600 rounded hover:bg-green-500 transition-colors text-sm">Logs</button>
              <button onclick="viewHistory('<%= proc.PID %>')" class="px-3 py-1 bg-purple-600 rounded hover:bg-purple-500 transition-colors text-sm">History</button>
            </div>

            <!-- Chart -->
            <div class="mt-4 h-40 bg-gray-800 p-2 rounded">
              <canvas id="chart-<%= proc.PID %>"></canvas>
            </div>
          </div>
        <% }) %>
      </div>
    <% } else { %>
      <p class="text-gray-400">No system processes found.</p>
    <% } %>
  </div>

  <!-- Process Details Modal -->
  <div id="detailsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-gray-800 p-6 rounded-xl max-w-2xl w-full mx-4 max-h-96 overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold">Process Details</h3>
        <button onclick="closeModal('detailsModal')" class="text-gray-400 hover:text-white">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div id="detailsContent" class="space-y-2 font-mono text-sm">
        <!-- Process details will be loaded here -->
      </div>
    </div>
  </div>

  <!-- Process Logs Modal -->
  <div id="logsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-gray-800 p-6 rounded-xl max-w-4xl w-full mx-4 max-h-96">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold">Process Logs</h3>
        <button onclick="closeModal('logsModal')" class="text-gray-400 hover:text-white">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div id="logsContent" class="bg-gray-900 p-4 rounded font-mono text-sm overflow-y-auto max-h-80">
        <!-- Process logs will be loaded here -->
      </div>
    </div>
  </div>

  <!-- Historical Data Modal -->
  <div id="historyModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-gray-800 p-6 rounded-xl max-w-6xl w-full mx-4 max-h-96">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold">Historical Data - Process <span id="historyPid"></span></h3>
        <button onclick="closeModal('historyModal')" class="text-gray-400 hover:text-white">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div class="bg-gray-900 p-4 rounded h-80">
        <canvas id="fullHistoryChart"></canvas>
      </div>
      <div id="historyInfo" class="mt-4 text-sm text-gray-400 text-center">
        <!-- Historical data info will be loaded here -->
      </div>
    </div>
  </div>

  <!-- Loading Modal -->
  <div id="loadingModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-gray-800 p-6 rounded-xl">
      <div class="flex items-center space-x-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
        <span>Loading...</span>
      </div>
    </div>
  </div>

  <script>
    const socket = io();
    const charts = {};
    let processesData = [];

    function createChart(ctx) {
      return new Chart(ctx, {
        type: "line",
        data: { labels: [], datasets: [
          { 
            label: "CPU (%)", 
            borderColor: "rgb(34, 197, 94)", // green-500
            backgroundColor: "rgba(34, 197, 94, 0.1)",
            data: [], 
            yAxisID: "y",
            tension: 0.1,
            pointRadius: 1,
            pointHoverRadius: 4
          },
          { 
            label: "Memory (%)", 
            borderColor: "rgb(6, 182, 212)", // cyan-500 
            backgroundColor: "rgba(6, 182, 212, 0.1)",
            data: [], 
            yAxisID: "y1",
            tension: 0.1,
            pointRadius: 1,
            pointHoverRadius: 4
          }
        ]},
        options: {
          responsive: true, 
          maintainAspectRatio: false,
          interaction: {
            intersect: false,
            mode: 'index'
          },
          scales: { 
            x: {
              ticks: {
                color: 'white',
                maxTicksLimit: 10,
                callback: function(value, index, values) {
                  // Show only every nth label to avoid overcrowding
                  const totalLabels = this.chart.data.labels.length;
                  if (totalLabels > 50) {
                    return index % Math.ceil(totalLabels / 10) === 0 ? this.chart.data.labels[value] : '';
                  }
                  return this.chart.data.labels[value];
                }
              },
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              }
            },
            y: { 
              position: "left",
              ticks: { color: 'white' },
              grid: { color: 'rgba(255, 255, 255, 0.1)' },
              title: {
                display: true,
                text: 'CPU %',
                color: 'rgb(34, 197, 94)'
              }
            }, 
            y1: { 
              position: "right", 
              grid: { drawOnChartArea: false },
              ticks: { color: 'white' },
              title: {
                display: true,
                text: 'Memory %',
                color: 'rgb(6, 182, 212)'
              }
            }
          },
          plugins: {
            legend: {
              labels: { color: 'white', usePointStyle: true }
            },
            tooltip: {
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              titleColor: 'white',
              bodyColor: 'white',
              callbacks: {
                title: function(context) {
                  return 'Time: ' + context[0].label;
                },
                afterTitle: function(context) {
                  // Show data point count
                  return `Data points: ${context[0].chart.data.labels.length}`;
                }
              }
            }
          },
          elements: {
            line: {
              borderWidth: 2
            }
          }
        }
      });
    }

    function showModal(modalId) {
      document.getElementById(modalId).classList.remove('hidden');
      document.getElementById(modalId).classList.add('flex');
    }

    function closeModal(modalId) {
      document.getElementById(modalId).classList.add('hidden');
      document.getElementById(modalId).classList.remove('flex');
    }

    function showLoading() {
      showModal('loadingModal');
    }

    function hideLoading() {
      closeModal('loadingModal');
    }

    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 p-4 rounded-lg text-white z-50 ${
        type === 'success' ? 'bg-green-600' :
        type === 'error' ? 'bg-red-600' :
        type === 'warning' ? 'bg-yellow-600' : 'bg-blue-600'
      }`;
      notification.textContent = message;
      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 5000);
    }

    function updateProcessGrid(processes) {
      processesData = processes;
      const grid = document.getElementById('systemGrid');
      
      // Add new processes or update existing ones
      processes.forEach(proc => {
        let card = document.getElementById(`proc-${proc.PID}`);
        
        if (!card) {
          // Create new process card
          const cardHtml = `
            <div id="proc-${proc.PID}" class="bg-gray-800 p-4 rounded-xl shadow-lg">
              <h3 class="text-lg font-bold mb-2 truncate">${proc.COMMAND}</h3>
              <p>PID: <span class="text-yellow-400">${proc.PID}</span></p>
              <p>User: <span class="text-blue-400">${proc.USER}</span></p>
              <p>CPU: <span class="cpu text-green-400">${proc.CPU}%</span></p>
              <p>Memory: <span class="mem text-cyan-400">${proc.MEM}%</span></p>
              <p>Status: <span class="status text-purple-400">${proc.STAT}</span></p>
              <p>Start Time: <span class="text-gray-400">${proc.START || proc.STIME}</span></p>
              <div class="mt-3 flex gap-2 flex-wrap">
                <button onclick="killProcess('${proc.PID}')" class="px-3 py-1 bg-red-600 rounded hover:bg-red-500 transition-colors text-sm">Kill</button>
                <button onclick="forceKillProcess('${proc.PID}')" class="px-3 py-1 bg-red-800 rounded hover:bg-red-700 transition-colors text-sm">Force Kill</button>
                <button onclick="viewDetails('${proc.PID}')" class="px-3 py-1 bg-blue-600 rounded hover:bg-blue-500 transition-colors text-sm">Details</button>
                <button onclick="viewLogs('${proc.PID}')" class="px-3 py-1 bg-green-600 rounded hover:bg-green-500 transition-colors text-sm">Logs</button>
                <button onclick="viewHistoricalData('${proc.PID}')" class="px-3 py-1 bg-purple-600 rounded hover:bg-purple-500 transition-colors text-sm">History</button>
              </div>
              <div class="mt-4 h-40 bg-gray-800 p-2 rounded relative">
                <canvas id="chart-${proc.PID}"></canvas>
                <div class="absolute top-2 right-2 text-xs text-gray-400" id="data-count-${proc.PID}">
                  ${proc.historyLength || 0} data points
                </div>
              </div>
            </div>
          `;
          grid.insertAdjacentHTML('beforeend', cardHtml);
          
          // Initialize chart for new process with historical data
          const canvas = document.getElementById(`chart-${proc.PID}`);
          if (canvas) {
            const ctx = canvas.getContext('2d');
            charts[proc.PID] = createChart(ctx);
            
            // Load historical data if available
            if (proc.chartData && proc.chartData.labels.length > 0) {
              charts[proc.PID].data.labels = proc.chartData.labels;
              charts[proc.PID].data.datasets[0].data = proc.chartData.cpu;
              charts[proc.PID].data.datasets[1].data = proc.chartData.memory;
              charts[proc.PID].update('none');
            }
          }
        } else {
          // Update existing card
          card.querySelector(".cpu").innerText = proc.CPU + "%";
          card.querySelector(".mem").innerText = proc.MEM + "%";
          card.querySelector(".status").innerText = proc.STAT;
          
          // Update data point counter
          const dataCounter = document.getElementById(`data-count-${proc.PID}`);
          if (dataCounter) {
            dataCounter.textContent = `${proc.historyLength || 0} data points`;
          }
        }

        // Update chart with full historical data
        const chart = charts[proc.PID];
        if (chart && proc.chartData) {
          // Replace entire dataset with historical data
          chart.data.labels = proc.chartData.labels;
          chart.data.datasets[0].data = proc.chartData.cpu;
          chart.data.datasets[1].data = proc.chartData.memory;
          chart.update('none'); // Disable animation for better performance
        }
      });
      
      // Remove processes that no longer exist
      const currentPids = new Set(processes.map(p => p.PID));
      Object.keys(charts).forEach(pid => {
        if (!currentPids.has(pid)) {
          const card = document.getElementById(`proc-${pid}`);
          if (card) card.remove();
          if (charts[pid]) {
            charts[pid].destroy();
            delete charts[pid];
          }
        }
      });
    }

    // Initialize existing charts
    document.querySelectorAll("canvas[id^='chart-']").forEach(c => {
      const ctx = c.getContext("2d");
      const pid = c.id.split("-")[1];
      charts[pid] = createChart(ctx);
    });

    // Function to update system statistics
    function updateSystemStats() {
      fetch('/system/stats')
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            const stats = data.stats;
            document.getElementById('processCount').textContent = stats.processCount;
            document.getElementById('avgCpu').textContent = stats.avgCpu + '%';
            document.getElementById('memUsage').textContent = stats.memory.usedPercent + '%';
            document.getElementById('systemLoad').textContent = stats.load['1min'];
            
            // Calculate total data points across all processes
            let totalDataPoints = 0;
            processesData.forEach(proc => {
              totalDataPoints += proc.historyLength || 0;
            });
            document.getElementById('dataPoints').textContent = totalDataPoints;
            
            // Update data range info
            if (totalDataPoints > 0) {
              const avgPoints = Math.round(totalDataPoints / (processesData.length || 1));
              const timeSpan = Math.round((avgPoints * 5) / 60); // Convert to minutes
              document.getElementById('dataRange').textContent = 
                `Charts show ${timeSpan} minutes of data (${totalDataPoints} total points across ${processesData.length} processes)`;
            }
          }
        })
        .catch(err => console.error('Error updating system stats:', err));
    }
    
    // Update system stats every 10 seconds
    setInterval(updateSystemStats, 10000);
    updateSystemStats(); // Initial update
    
    // Socket event listeners
    socket.on("systemUpdate", updateProcessGrid);
    
    socket.on("processKilled", (data) => {
      hideLoading();
      if (data.success) {
        showNotification(data.message, 'success');
      } else {
        showNotification(`Error: ${data.error}`, 'error');
      }
    });
    
    socket.on("processRemoved", (data) => {
      const card = document.getElementById(`proc-${data.pid}`);
      if (card) {
        card.style.transition = 'opacity 0.5s';
        card.style.opacity = '0';
        setTimeout(() => card.remove(), 500);
      }
      if (charts[data.pid]) {
        charts[data.pid].destroy();
        delete charts[data.pid];
      }
    });

    // Process management functions
    function killProcess(pid) {
      if (confirm(`Are you sure you want to kill process ${pid}? This action cannot be undone.`)) {
        showLoading();
        socket.emit('killProcess', { pid });
      }
    }
    
    function forceKillProcess(pid) {
      if (confirm(`Are you sure you want to FORCE KILL process ${pid}? This will terminate the process immediately and cannot be undone.`)) {
        showLoading();
        socket.emit('forceKillProcess', { pid });
      }
    }

    function viewDetails(pid) {
      showLoading();
      fetch(`/system/details/${pid}`)
        .then(res => res.json())
        .then(data => {
          hideLoading();
          if (data.success) {
            const details = data.details;
            const detailsHtml = `
              <div class="bg-gray-900 p-4 rounded">
                <h4 class="text-lg font-bold mb-3 text-blue-400">Basic Information</h4>
                <div class="grid grid-cols-2 gap-4">
                  <div><span class="text-gray-400">PID:</span> <span class="text-white">${details.PID}</span></div>
                  <div><span class="text-gray-400">User:</span> <span class="text-white">${details.USER}</span></div>
                  <div><span class="text-gray-400">CPU:</span> <span class="text-white">${details.CPU}%</span></div>
                  <div><span class="text-gray-400">Memory:</span> <span class="text-white">${details.MEM}%</span></div>
                  <div><span class="text-gray-400">Status:</span> <span class="text-white">${details.STAT}</span></div>
                  <div><span class="text-gray-400">Start Time:</span> <span class="text-white">${details.START}</span></div>
                </div>
                ${details.VSZ ? `
                  <h4 class="text-lg font-bold mt-4 mb-3 text-green-400">Memory Details</h4>
                  <div class="grid grid-cols-2 gap-4">
                    <div><span class="text-gray-400">Virtual Size:</span> <span class="text-white">${details.VSZ} KB</span></div>
                    <div><span class="text-gray-400">Resident Size:</span> <span class="text-white">${details.RSS} KB</span></div>
                  </div>
                ` : ''}
                <h4 class="text-lg font-bold mt-4 mb-3 text-cyan-400">Command</h4>
                <div class="bg-black p-2 rounded text-green-400 break-all">${details.COMMAND}</div>
              </div>
            `;
            document.getElementById('detailsContent').innerHTML = detailsHtml;
            showModal('detailsModal');
          } else {
            showNotification(`Error fetching details: ${data.error}`, 'error');
          }
        })
        .catch(err => {
          hideLoading();
          showNotification(`Error: ${err.message}`, 'error');
        });
    }
    
    function viewLogs(pid) {
      showLoading();
      fetch(`/system/logs/${pid}`)
        .then(res => res.json())
        .then(data => {
          hideLoading();
          if (data.success) {
            let logsHtml = `<h4 class="text-green-400 mb-2">Logs for Process ${data.pid}: ${data.command}</h4>`;
            
            if (data.logs && data.logs.length > 0) {
              data.logs.forEach(log => {
                logsHtml += `
                  <div class="mb-4">
                    <h5 class="text-blue-400 mb-2 capitalize">${log.type} ${log.path ? `(${log.path})` : ''}</h5>
                    <pre class="whitespace-pre-wrap text-gray-300 bg-black p-2 rounded text-xs max-h-40 overflow-y-auto">${log.content}</pre>
                  </div>
                `;
              });
            } else {
              logsHtml += '<div class="text-gray-400">No logs available for this process.</div>';
            }
            
            document.getElementById('logsContent').innerHTML = logsHtml;
            showModal('logsModal');
          } else {
            showNotification(`Error fetching logs: ${data.error}`, 'error');
          }
        })
        .catch(err => {
          hideLoading();
          showNotification(`Error: ${err.message}`, 'error');
        });
    }
    
    function viewHistoricalData(pid) {
      showLoading();
      fetch(`/system/history/${pid}`)
        .then(res => res.json())
        .then(data => {
          hideLoading();
          if (data.success) {
            document.getElementById('historyPid').textContent = pid;
            
            // Update info panel
            const infoText = `${data.dataPoints} data points collected${data.timeRange ? 
              ` from ${new Date(data.timeRange.start).toLocaleString()} to ${new Date(data.timeRange.end).toLocaleString()}` : 
              ' (no data available yet)'}`;
            document.getElementById('historyInfo').innerHTML = infoText;
            
            // Create or update the full history chart
            const canvas = document.getElementById('fullHistoryChart');
            const ctx = canvas.getContext('2d');
            
            // Destroy existing chart if it exists
            if (window.fullHistoryChart) {
              window.fullHistoryChart.destroy();
            }
            
            // Create new chart with all historical data
            window.fullHistoryChart = new Chart(ctx, {
              type: 'line',
              data: data.chartData,
              options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                  intersect: false,
                  mode: 'index'
                },
                scales: {
                  x: {
                    ticks: {
                      color: 'white',
                      maxTicksLimit: 15,
                      callback: function(value, index, values) {
                        // Show every nth label based on data density
                        const totalLabels = this.chart.data.labels.length;
                        if (totalLabels > 100) {
                          return index % Math.ceil(totalLabels / 15) === 0 ? this.chart.data.labels[value] : '';
                        } else if (totalLabels > 50) {
                          return index % Math.ceil(totalLabels / 10) === 0 ? this.chart.data.labels[value] : '';
                        }
                        return this.chart.data.labels[value];
                      }
                    },
                    grid: { color: 'rgba(255, 255, 255, 0.1)' }
                  },
                  y: {
                    position: 'left',
                    ticks: { color: 'white' },
                    grid: { color: 'rgba(255, 255, 255, 0.1)' },
                    title: {
                      display: true,
                      text: 'CPU %',
                      color: 'rgb(34, 197, 94)'
                    }
                  },
                  y1: {
                    position: 'right',
                    grid: { drawOnChartArea: false },
                    ticks: { color: 'white' },
                    title: {
                      display: true,
                      text: 'Memory %',
                      color: 'rgb(6, 182, 212)'
                    }
                  }
                },
                plugins: {
                  legend: {
                    labels: { color: 'white', usePointStyle: true }
                  },
                  tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    titleColor: 'white',
                    bodyColor: 'white',
                    callbacks: {
                      title: function(context) {
                        return 'Time: ' + context[0].label;
                      },
                      afterTitle: function(context) {
                        return `Total data points: ${context[0].chart.data.labels.length}`;
                      }
                    }
                  }
                }
              }
            });
            
            showModal('historyModal');
          } else {
            showNotification(`Error fetching historical data: ${data.error}`, 'error');
          }
        })
        .catch(err => {
          hideLoading();
          showNotification(`Error: ${err.message}`, 'error');
        });
    }
    
    // Close modals when clicking outside
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('bg-opacity-50')) {
        closeModal(e.target.id);
      }
    });
    
    console.log('🚀 System Processes Dashboard initialized with real-time updates');
  </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Docker Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-900 text-white">
  <% include ("header") %>

  <div class="container mx-auto p-6">
    <h2 class="text-2xl font-semibold mb-4">Docker Containers</h2>

    <div id="dockerGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <% containers.forEach(c => { %>
        <div id="cont-<%= c.ID %>" class="bg-gray-800 p-4 rounded-xl shadow-md">
          <h3 class="text-lg font-bold"><%= c.Names %></h3>
          <p>Status: 
            <span class="<%= c.State === 'running' ? 'text-green-400' : 'text-red-400' %>">
              <%= c.State %>
            </span>
          </p>
          <p>Image: <%= c.Image %></p>
          <p>Ports: <%= c.Ports || 'N/A' %></p>
          <p>Size: <%= c.Size %></p>
          <p>Running For: <%= c.RunningFor %></p>

          <!-- Actions -->
          <div class="mt-3 flex gap-2">
            <button onclick="dockerAction('<%= c.ID %>', 'restart')" class="px-3 py-1 bg-yellow-600 rounded">Restart</button>
            <% if (c.State === 'running') { %>
              <button onclick="dockerAction('<%= c.ID %>', 'stop')" class="px-3 py-1 bg-red-600 rounded">Stop</button>
            <% } else { %>
              <button onclick="dockerAction('<%= c.ID %>', 'start')" class="px-3 py-1 bg-green-600 rounded">Start</button>
            <% } %>
            <a href="/docker/logs/<%= c.ID %>" class="px-3 py-1 bg-gray-600 rounded">Logs</a>
            <button onclick="dockerAction('<%= c.ID %>', 'rm')" class="px-3 py-1 bg-gray-500 rounded">Remove</button>
          </div>

          <!-- Chart -->
          <div class="mt-4 h-40">
            <canvas id="chart-<%= c.ID %>" class="bg-gray-700 p-2 rounded"></canvas>
          </div>
        </div>
      <% }) %>
    </div>
  </div>

  <script>
    const socket = io();
    const charts = {};

    function createChart(ctx, name) {
      return new Chart(ctx, {
        type: "line",
        data: { labels: [], datasets: [
          { label: "CPU (%)", borderColor: "lime", data: [], yAxisID: "y" },
          { label: "Memory (MB)", borderColor: "skyblue", data: [], yAxisID: "y1" }
        ]},
        options: {
          responsive: true, maintainAspectRatio: false,
          scales: { y: { position: "left" }, y1: { position: "right", grid: { drawOnChartArea: false } } }
        }
      });
    }

    document.querySelectorAll("canvas[id^='chart-']").forEach(c => {
      const ctx = c.getContext("2d");
      const id = c.id.split("-")[1];
      charts[id] = createChart(ctx, `Container ${id}`);
    });

    // Docker live update
socket.on("dockerUpdate", (containers) => {
  containers.forEach(container => {
    const card = document.getElementById(`docker-${container.ID}`);
    if (!card) return;

    card.querySelector(".status").innerText = container.State;
    card.querySelector(".cpu").innerText = container.CPU || 0;
    card.querySelector(".mem").innerText = container.Memory || 0;

    const chart = dockerCharts[container.ID];
    if (!chart) return;

    const now = new Date().toLocaleTimeString();
    if (chart.data.labels.length > 20) {
      chart.data.labels.shift();
      chart.data.datasets[0].data.shift();
      chart.data.datasets[1].data.shift();
    }
    chart.data.labels.push(now);
    chart.data.datasets[0].data.push(container.CPU || 0);
    chart.data.datasets[1].data.push(container.Memory || 0);
    chart.update();
  });
});

    function dockerAction(id, cmd) {
      fetch(`/docker/action/${id}/${cmd}`, { method: "POST" })
        .then(res => res.json())
        .then(data => alert(data.success ? `${cmd} executed` : `Error: ${data.error}`));
    }
  </script>
</body>
</html>
